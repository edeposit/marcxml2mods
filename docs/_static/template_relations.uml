package xslt {
    class mods_nonp_single as "MARC21slim2MODS3-4-NDK.xsl" <<X, Green>> {
        Converts Aleph's non-periodical
        non-multi-monograph metadata to
        MODS.
    }
    class mods_nonp_multi as "MARC21toMultiMonographTitle.xsl" <<X, Green>> {
        Converts Aleph's non-periodical
        multi-monograph metadata to MODS.
    }
    class mods_per as "MARC21toPeriodicalTitle.xsl" <<X, Green>> {
        Converts Aleph's periodical
        metadata to MODS.
    }
}

package mods_postprocessor {
    class mp_init as "_â€‹_init__.py" <<M, Red>> {
        Used to fix data after XSLT templates.

        $templater:module:mods_postprocessor/__init__
    }
    class shared_funcs as "shared_funcs.py" <<M, Red>> {
        Functions shared in mods_postprocessor/ module.

        $templater:module:mods_postprocessor/shared_funcs
    }
    class monograph as "monograph.py" <<M, Red>> {
        Functions used to postprocess Monograph
        MODS XML.

        $templater:module:mods_postprocessor/monograph
    }
}

class xslt_transformer as "xslt_transformer.py" <<M, Red>> {
    Used to transform Aleph's metadata to MODS.

    $templater:module:xslt_transformer
}

shared_funcs -d-> monograph: uses
monograph -d-> mp_init: is imported

mods_nonp_single -d-> xslt_transformer: reads
mods_nonp_multi .d.> xslt_transformer: reads
mods_per .d.> xslt_transformer: reads

mp_init -r-> xslt_transformer: fixes
xslt_transformer --> mp_init